<?php

/**
 * Implements hook_permission().
 */
function workflow_hide_fields_permission() {
  return array(
    'administer workflow hide fields' => array(
      'title' => t('Administer workflow hide fields'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function workflow_hide_fields_menu() {
  $items = array();
  
  $items['admin/config/content/workflow_hide_fields/settings'] = array(
    'title' => 'Workflow hide fields settings',
    'description' => 'Configuration for Workflow hide fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('workflow_hide_fields_settings_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'workflow_hide_fields.admin.inc',
  );
  
  return $items;
}

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function workflow_hide_fields_help($path, $arg) {
  switch ($path) {
    case "admin/help#workflow_hide_fields":
      // TODO: Improve help
      return '<p>' . t("Hide given fields in specific states.") . '</p>';
      break;
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function workflow_hide_fields_ctools_plugin_directory($module, $type) {
// Load the export_ui plugin.
  if ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Fetches all presets from the database and returns them as an associative array.
 */
function workflow_hide_fields_preset_load_all() {
  ctools_include('export');
  $presets = ctools_export_crud_load_all('workflow_hide_fields_preset');
  foreach ($presets as $preset) {
    // Ensure the preset is typecast after being loaded from DB
    _workflow_hide_fields_typecast_preset($preset->options);
  }
  return $presets;
}

/**
 * Fetches the given preset and returns it as an object or NULL, if no set could be found.
 */
function workflow_hide_fields_preset_load($preset_name) {
  ctools_include('export');
  $preset = ctools_export_crud_load('workflow_hide_fields_preset', $preset_name);
    // Ensure the preset is typecast after being loaded from DB
  _workflow_hide_fields_typecast_preset($preset->options);
  return $preset;
}

/**
 * Checks whether an option set with the given name already exists.
 */
function workflow_hide_fields_preset_exists($preset_name) {
  ctools_include('export');
  $preset_name = ctools_export_crud_load('workflow_hide_fields_preset', $preset_name);
  return isset($preset_name->name);
}

/**
 * Default settings for a newly created option set
 *
 * @param string $key [optional]
 *  Get specific default value
 *
 * @see https://github.com/woothemes/elexslider/blob/master/README.mdown
 * @see https://github.com/woothemes/elexslider/wiki/elexslider-Properties
 */
function _workflow_hide_fields_preset_defaults($key = NULL) {

  // We add typecasts to ensure the variables get json encoded properly

  $defaults = array(
    'nodeType' => '',
    'fieldResponsible' => '',
    'fieldRating' => '',
    'fieldState' => '',
    'fieldsWritableOnlyOnCreation' => '',
    'stateResponsibleAssignment' => '',
    'statesFinal' => '',
    'statesResponsibleAssigned' => '',
    'roleSupervisor' => '',
  );

  // Typecast the values
  _workflow_hide_fields_typecast_preset($defaults);

  // Return the specific item
  if (isset($key) and array_key_exists($key, $defaults)) {
    return $defaults[$key];
  }

  // Return all items
  return $defaults;
}

/**
 * Adds the typecasting to the values so that the generated
 * json array keeps the right values
 */
function _workflow_hide_fields_typecast_preset(&$options) {
  if (isset($options) && !empty($options)) {
    foreach ($options as $key => $value) {
      switch ($key) {
        case 'node_type':
        case 'field_responsible':
        case 'field_rating':
        case 'field_state':
        case 'fields_writable_only_on_creation':
        case 'state_responsible_assignment':
        case 'states_final':
        case 'states_responsible_assigned':
        case 'role_supervisor':
          $options[$key] = (string)$value;
          break;
      }
    }
  }
}

/* END of configuration */

/**
 * Implements hook_field_access
 */
function workflow_hide_fields_field_access($op, $field, $entity_type, $entity, $account) {
  // If the entity is equal as the given type
  if (isset($entity->type) && $entity->type == "orden_de_trabajo") { // TODO: Convert to variable "orden_de_trabajo"
  
    // If the field is the right one
    if (($field['field_name'] == 'field_responsable') && ($op == 'edit')) { // TODO: Convert to variable 'field_responsable'
      $propiedad = 'field_flujo_de_trabajo'; // TODO: Convert to variable 'field_flujo_de_trabajo'
      $en_creacion = !isset($entity->$propiedad);
      
      $state = '0';
      if (!$en_creacion) {
        $entity_property = $entity->$propiedad;
        $lang = $entity_property['#language'];
        $state = $entity_property[$lang][0]['value'];
      }

      if ($en_creacion || $state != '2')
        return user_access('administer nodes', $account);
    }
    
    // If the field is the right one
    if (($field['field_name'] == 'field_calificacion') && ($op == 'edit')) { // TODO: Convert to variable "field_calificacion"
      $propiedad = 'field_flujo_de_trabajo'; // TODO: Convert to variable 'field_flujo_de_trabajo'
      $en_creacion = !isset($entity->$propiedad);
      
      $state = '0';
      if (!$en_creacion) {
        $entity_property = $entity->$propiedad;
        $lang = $entity_property['#language'];
        $state = $entity_property[$lang][0]['value'];
      }

      if ($en_creacion || $state != '6')
        return user_access('administer nodes', $account);
    }
    
    
    return TRUE;
  }
}

function workflow_hide_fields_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'orden_de_trabajo_node_form') { // TODO: Convert to variable 'orden_de_trabajo_node_form'
    unset($form['actions']['preview']);
    $node = $form_state['node'];
    $new_node = (!isset($node->nid) || isset($node->is_new));

    if (!$new_node) {
      $form['title']['#disabled'] = TRUE; // TODO: Convert to variable 'title'
      $form['body']['#disabled'] = TRUE; // TODO: Convert to variable 'body'
    }
  }
}

function workflow_hide_fields_node_access($node, $op, $account) {
  // Add your extra validation checks here
  // To deny access return NODE_ACCESS_DENY otherwise return nothing or NODE_ACCESS_IGNORE.

  if (isset($node->type) && $node->type == "orden_de_trabajo") { // TODO: Convert to variable "orden_de_trabajo"
    global $user;

    $logueado = $user->uid;
    $autor = $node->uid;

    $usuario_logueado_es_supervisor = false;

    if (in_array('supervisor', $user->roles)) { // TODO: Convert to variable 'supervisor'
      $usuario_logueado_es_supervisor = true; // TODO: Change the variable name
    }

    $property = 'field_flujo_de_trabajo'; // TODO: Convert to variable 'field_flujo_de_trabajo'
    $node_property = $node->$property;
    $lang = $node_property['#language'];
    $estado = $node_property[$lang][0]['value'];
    
    $property_resp = 'field_responsable';
    $responsable = NULL;
    if (isset($node->$property_resp)) {
      $node_property_resp = $node->$property_resp;
      if (isset($node_property['#language']))
      {
        $lang = $node_property['#language'];
        if (isset($node_property_resp[$lang]))
          if (isset($node_property_resp[$lang][0]))
            $responsable = $node_property_resp[$lang][0]['target_id'];
      } 
    }

    if ($op == "update") {
      $en_validacion = $estado == 2;
      
      $final_states = array(6, 7);
      $terminado = in_array($estado, $final_states);
      //$terminado = ($estado == 6) || ($estado == 7);

      $supervisor_validando = $en_validacion && $usuario_logueado_es_supervisor;

      if ($supervisor_validando) {
        return NODE_ACCESS_IGNORE;
      }

      if (!$en_validacion && !$terminado) {
        if ($responsable == $logueado) {
          return NODE_ACCESS_IGNORE;
        }
      }

      if (($autor == $logueado) && $terminado) {
        return NODE_ACCESS_IGNORE;
      }
      else
        return NODE_ACCESS_DENY;
    }

    // If there is a responsible (state >= 3) and the logged in user is that responsible, he/she can see it
    $states_with_responsible = array(4, 5, 6, 7);
    if (in_array($estado, $states_with_responsible)) {
      if ($responsable == $logueado) {
        return NODE_ACCESS_IGNORE;
      }
    }

    // If only author and supervisor can see it
    if (($autor != $logueado) && (!$usuario_logueado_es_supervisor)) {
      return NODE_ACCESS_DENY;
    }
  }
}
