<?php

/**
 * Implements hook_permission().
 */
function workflow_hide_fields_permission() {
  return array(
    'administer workflow hide fields' => array(
      'title' => t('Administer workflow hide fields'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function workflow_hide_fields_menu() {
  $items = array();

  $items['admin/config/content/workflow_hide_fields/settings'] = array(
    'title' => 'Workflow hide fields settings',
    'description' => 'Configuration for Workflow hide fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('workflow_hide_fields_settings_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'workflow_hide_fields.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function workflow_hide_fields_help($path, $arg) {
  switch ($path) {
    case "admin/help#workflow_hide_fields":
      // TODO: Improve help
      return '<p>' . t("Hide given fields in specific states.") . '</p>';
      break;
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function workflow_hide_fields_ctools_plugin_directory($module, $type) {
// Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Fetches all presets from the database and returns them as an associative array.
 */
function workflow_hide_fields_preset_load_all() {
  ctools_include('export');
  $presets = ctools_export_crud_load_all('workflow_hide_fields_preset');
  foreach ($presets as $preset) {
    // Ensure the preset is typecast after being loaded from DB
    _workflow_hide_fields_typecast_preset($preset->options);
  }
  return $presets;
}

/**
 * Fetches the given preset and returns it as an object or NULL, if no set could be found.
 */
function workflow_hide_fields_preset_load($preset_name) {
  ctools_include('export');
  $preset = ctools_export_crud_load('workflow_hide_fields_preset', $preset_name);
  // Ensure the preset is typecast after being loaded from DB
  _workflow_hide_fields_typecast_preset($preset->options);
  return $preset;
}

/**
 * Checks whether an option set with the given name already exists.
 */
function workflow_hide_fields_preset_exists($preset_name) {
  ctools_include('export');
  $preset_name = ctools_export_crud_load('workflow_hide_fields_preset', $preset_name);
  return isset($preset_name->name);
}

/**
 * Default settings for a newly created option set
 *
 * @param string $key [optional]
 *  Get specific default value
 */
function _workflow_hide_fields_preset_defaults($key = NULL) {

  // We add typecasts to ensure the variables get json encoded properly

  $defaults = array(
    'nodeType' => '',
    'fieldResponsible' => '',
    'fieldRating' => '',
    'fieldState' => '',
    'fieldsWritableOnlyOnCreation' => '',
    'stateResponsibleAssignment' => '',
    'statesFinal' => '',
    'statesRating' => '',
    'statesResponsibleAssigned' => '',
    'roleSupervisor' => '',
  );

  // Typecast the values
  _workflow_hide_fields_typecast_preset($defaults);

  // Return the specific item
  if (isset($key) and array_key_exists($key, $defaults)) {
    return $defaults[$key];
  }

  // Return all items
  return $defaults;
}

/**
 * Adds the typecasting to the values so that the generated
 * json array keeps the right values
 */
function _workflow_hide_fields_typecast_preset(&$options) {
  if (isset($options) && !empty($options)) {
    foreach ($options as $key => $value) {
      switch ($key) {
        case 'nodeType':
        case 'fieldResponsible':
        case 'fieldRating':
        case 'fieldState':
        case 'fieldsWritableOnlyOnCreation':
        case 'stateResponsibleAssignment':
        case 'statesFinal':
        case 'statesRating':
        case 'statesResponsibleAssigned':
        case 'roleSupervisor':
          $options[$key] = (string) $value;
          break;
      }
    }
  }
}

/* END of configuration */

/**
 * Implements hook_field_access
 */
function workflow_hide_fields_field_access($op, $field, $entity_type, $entity, $account) {

  $presets = array();
  ctools_include('export');
  foreach (workflow_hide_fields_preset_load_all() as $name => $preset) {
    $presets[] = check_plain($preset->options['nodeType']);
    $namedPresets[$preset->options['nodeType']] = $preset->options;
  }

  // If the entity is equal as the given type
  if (isset($entity->type) && in_array($entity->type, $presets)) {
    // If the field is the right one
    if (($field['field_name'] == $namedPresets[$entity->type]['fieldResponsible']) && ($op == 'edit')) {
      $property = $namedPresets[$entity->type]['fieldState'];
      $in_creation = !isset($entity->$property);

      $state = '0';
      if (!$in_creation) {
        $entity_property = $entity->$property;
        $state = $entity_property['und'][0]['value'];
      }

      if ($in_creation || $state != $namedPresets[$entity->type]['stateResponsibleAssignment'])
        return user_access('administer nodes', $account);
    }

    // If the field is the right one
    if (($field['field_name'] == $namedPresets[$entity->type]['fieldRating']) && ($op == 'edit')) {
      $property = $namedPresets[$entity->type]['fieldState'];
      $in_creation = !isset($entity->$property);

      $state = '0';
      if (!$in_creation) {
        $entity_property = $entity->$property;
        $state = $entity_property['und'][0]['value'];
      }

      $ratingStates = explode(',', $namedPresets[$node->type]['statesRating']);
      if ($in_creation || (!in_array($state, $ratingStates)))
        return user_access('administer nodes', $account);
    }

    return TRUE;
  }
}

function workflow_hide_fields_form_alter(&$form, &$form_state, $form_id) {
  $presets = array();
  ctools_include('export');
  foreach (workflow_hide_fields_preset_load_all() as $name => $preset) {
    $presets[] = check_plain($preset->options['nodeType'] . '_node_form');
    $namedPresets[$preset->options['nodeType'] . '_node_form'] = $preset->options;
  }

  if (in_array($form_id, $presets)) {
    unset($form['actions']['preview']);
    $node = $form_state['node'];
    $new_node = (!isset($node->nid) || isset($node->is_new));

    if (!$new_node) {
      $fieldsToDisable = explode(',', $namedPresets[$form_id]['fieldsWritableOnlyOnCreation']);
      foreach ($fieldsToDisable as $fieldToDisable) {
        $form[$fieldToDisable]['#disabled'] = TRUE;
      }
    }
  }
}

function workflow_hide_fields_node_access($node, $op, $account) {
  // To deny access return NODE_ACCESS_DENY otherwise return nothing or NODE_ACCESS_IGNORE.

  $presets = array();
  ctools_include('export');
  foreach (workflow_hide_fields_preset_load_all() as $name => $preset) {
    //$presets[$name] = check_plain($preset->title);
    $presets[] = check_plain($preset->options['nodeType']);
    $namedPresets[$preset->options['nodeType']] = $preset->options;
  }

  if (isset($node->type) && in_array($node->type, $presets)) {
    global $user;

    $userLoggedIn = $user->uid;
    $author = $node->uid;

    $userIsSupervisor = false;

    if (in_array($namedPresets[$node->type]['roleSupervisor'], $user->roles)) {
      $userIsSupervisor = true;
    }

    $property = $namedPresets[$node->type]['fieldState'];
    $node_property = $node->$property;
    $state = $node_property['und'][0]['value'];

    $property_resp = $namedPresets[$node->type]['fieldResponsible'];
    $responsible = NULL;
    if (isset($node->$property_resp)) {
      $node_property_resp = $node->$property_resp;
      if (isset($node_property_resp['und']))
        $responsible = $node_property_resp['und'][0]['target_id'];
    }
    
    if ($op == "update") {
      $inValidation = $state == $namedPresets[$node->type]['stateResponsibleAssignment'];

      $finalStates = explode(',', $namedPresets[$node->type]['statesFinal']);
      $finished = in_array($state, $finalStates);

      $supervisorValidating = $inValidation && $userIsSupervisor;

      if ($supervisorValidating) {
        return NODE_ACCESS_IGNORE;
      }

      if (!$inValidation && !$finished) {
        if ($responsible == $userLoggedIn) {
          return NODE_ACCESS_IGNORE;
        }
      }

      if (($author == $userLoggedIn) && $finished) {
        return NODE_ACCESS_IGNORE;
      }
      else
        return NODE_ACCESS_DENY;
    }

    // If there is a responsible (state >= 3) and the logged in user is that responsible, he/she can see it
    $statesWithResponsible = explode(',', $namedPresets[$node->type]['statesResponsibleAssigned']);
    if (in_array($state, $statesWithResponsible)) {
      if ($responsible == $userLoggedIn) {
        return NODE_ACCESS_IGNORE;
      }
    }

    // If only author and supervisor can see it
    if (($author != $userLoggedIn) && (!$userIsSupervisor)) {
      return NODE_ACCESS_DENY;
    }
  }
}
